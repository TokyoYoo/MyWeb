<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - Apologize</title>
  <!-- Google Fonts -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <!-- Modern Chart.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-dark: #3a56d4;
      --secondary: #7209b7;
      --success: #06d6a0;
      --warning: #ffd166;
      --danger: #ef476f;
      --info: #118ab2;
      --dark: #1f2937;
      --light: #f8f9fa;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-800: #1f2937;
      --body-bg: #f9fafb;
      --sidebar-width: 260px;
      --sidebar-collapsed-width: 70px;
      --card-shadow: 0 4px 15px rgba(31, 41, 55, 0.1);
      --transition: all 0.3s ease;
      --border-radius: 12px;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    body {
      background: var(--body-bg);
      color: var(--gray-800);
      font-size: 16px;
      line-height: 1.5;
      overflow-x: hidden;
    }

    /* Dashboard Layout */
    .dashboard-container {
      display: flex;
      min-height: 100vh;
    }

    /* Sidebar */
    .dashboard-sidebar {
      width: var(--sidebar-width);
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      color: white;
      height: 100vh;
      position: fixed;
      left: 0;
      top: 0;
      overflow-y: auto;
      transition: var(--transition);
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
    }

    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .sidebar-header h2 {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0;
    }

    .sidebar-nav {
      padding: 1rem 0;
    }

    .sidebar-nav ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .sidebar-nav li {
      margin-bottom: 0.5rem;
    }

    .sidebar-nav a {
      display: flex;
      align-items: center;
      padding: 0.8rem 1.5rem;
      color: rgba(255, 255, 255, 0.8);
      text-decoration: none;
      transition: var(--transition);
      border-left: 3px solid transparent;
    }

    .sidebar-nav a:hover, .sidebar-nav li.active a {
      background: rgba(255, 255, 255, 0.1);
      color: white;
      border-left: 3px solid white;
    }

    .sidebar-nav a i {
      margin-right: 10px;
      width: 20px;
      text-align: center;
    }

    .sidebar-footer {
      padding: 1rem 1.5rem;
      font-size: 0.8rem;
      color: rgba(255, 255, 255, 0.6);
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      position: absolute;
      bottom: 0;
      width: 100%;
    }

    /* Main Content */
    .dashboard-main {
      flex: 1;
      margin-left: var(--sidebar-width);
      padding: 1.5rem;
      transition: var(--transition);
    }

    .main-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--gray-200);
    }

    .header-left h1 {
      font-size: 1.8rem;
      font-weight: 700;
      margin: 0;
      color: var(--dark);
    }

    .date-display {
      font-size: 0.9rem;
      color: var(--gray-500);
      margin-top: 0.25rem;
    }

    .user-menu {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .user-greeting {
      font-weight: 500;
    }

    /* Stats Cards */
    .dashboard-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .stat-card {
      background: white;
      border-radius: var(--border-radius);
      padding: 1.5rem;
      display: flex;
      align-items: center;
      box-shadow: var(--card-shadow);
      transition: var(--transition);
      overflow: hidden;
      position: relative;
    }

    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 20px rgba(31, 41, 55, 0.15);
    }

    .stat-card:nth-child(1) {
      border-top: 3px solid var(--primary);
    }

    .stat-card:nth-child(2) {
      border-top: 3px solid var(--info);
    }

    .stat-card:nth-child(3) {
      border-top: 3px solid var(--success);
    }

    .stat-card:nth-child(4) {
      border-top: 3px solid var(--warning);
    }

    .stat-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: rgba(67, 97, 238, 0.1);
      color: var(--primary);
      font-size: 1.5rem;
      margin-right: 1rem;
    }

    .stat-card:nth-child(1) .stat-icon {
      background: rgba(67, 97, 238, 0.1);
      color: var(--primary);
    }

    .stat-card:nth-child(2) .stat-icon {
      background: rgba(17, 138, 178, 0.1);
      color: var(--info);
    }

    .stat-card:nth-child(3) .stat-icon {
      background: rgba(6, 214, 160, 0.1);
      color: var(--success);
    }

    .stat-card:nth-child(4) .stat-icon {
      background: rgba(255, 209, 102, 0.1);
      color: var(--warning);
    }

    .stat-info h3 {
      font-size: 0.9rem;
      font-weight: 500;
      color: var(--gray-500);
      margin: 0 0 0.25rem;
    }

    .stat-number {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--dark);
      margin: 0;
    }

    /* Tabs */
    .tab-navigation {
      margin-bottom: 1.5rem;
    }

    .tab-buttons {
      display: flex;
      gap: 0.5rem;
      border-bottom: 1px solid var(--gray-200);
    }

    .tab-button {
      padding: 0.75rem 1.5rem;
      background: none;
      border: none;
      border-bottom: 2px solid transparent;
      font-weight: 500;
      color: var(--gray-500);
      cursor: pointer;
      transition: var(--transition);
    }

    .tab-button:hover {
      color: var(--primary);
    }

    .tab-button.active {
      color: var(--primary);
      border-bottom: 2px solid var(--primary);
    }

    .tab-content {
      display: none;
      animation: fadeIn 0.5s;
    }

    .tab-content.active {
      display: block;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Chart Containers */
    .dashboard-charts {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .chart-container {
      background: white;
      border-radius: var(--border-radius);
      padding: 1.5rem;
      box-shadow: var(--card-shadow);
    }

    .chart-container h2 {
      font-size: 1.2rem;
      font-weight: 600;
      margin-bottom: 1rem;
      color: var(--dark);
    }

    /* Tables */
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .section-header h2 {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--dark);
    }

    .table-container {
      background: white;
      border-radius: var(--border-radius);
      padding: 1rem;
      box-shadow: var(--card-shadow);
      overflow-x: auto;
      margin-bottom: 2rem;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 0.75rem 1rem;
      text-align: left;
      border-bottom: 1px solid var(--gray-200);
    }

    th {
      font-weight: 600;
      color: var(--gray-500);
      text-transform: uppercase;
      font-size: 0.8rem;
    }

    tr:last-child td {
      border-bottom: none;
    }

    .mod-name-cell {
      display: flex;
      align-items: center;
    }

    .mod-thumbnail {
      width: 40px;
      height: 40px;
      object-fit: cover;
      border-radius: 6px;
      margin-right: 0.75rem;
    }

    .mod-icon {
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(67, 97, 238, 0.1);
      color: var(--primary);
      border-radius: 6px;
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }

    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      padding: 0.5rem 1rem;
      border-radius: 0.5rem;
      font-weight: 500;
      text-decoration: none;
      transition: var(--transition);
      cursor: pointer;
      border: none;
      font-size: 0.9rem;
    }

    .btn i {
      margin-right: 0.5rem;
    }

    .btn-primary {
      background: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background: var(--primary-dark);
    }

    .btn-outline {
      background: transparent;
      color: var(--primary);
      border: 1px solid var(--primary);
    }

    .btn-outline:hover {
      background: var(--primary);
      color: white;
    }

    .btn-sm {
      padding: 0.35rem 0.75rem;
      font-size: 0.8rem;
    }

    .btn-edit {
      background: rgba(17, 138, 178, 0.1);
      color: var(--info);
    }

    .btn-edit:hover {
      background: var(--info);
      color: white;
    }

    .btn-danger {
      background: rgba(239, 71, 111, 0.1);
      color: var(--danger);
    }

    .btn-danger:hover {
      background: var(--danger);
      color: white;
    }

    .link-btn {
      display: inline-flex;
      align-items: center;
      padding: 0.35rem 0.75rem;
      border-radius: 0.5rem;
      background: rgba(67, 97, 238, 0.1);
      color: var(--primary);
      text-decoration: none;
      font-size: 0.8rem;
      transition: var(--transition);
    }

    .link-btn:hover {
      background: var(--primary);
      color: white;
    }

    .link-btn i {
      margin-right: 0.35rem;
    }

    .inline-form {
      display: inline;
    }

    .actions {
      display: flex;
      gap: 0.5rem;
    }

    /* Filter Controls */
    .filter-controls {
      display: flex;
      gap: 0.75rem;
    }

    .date-filter {
      padding: 0.5rem;
      border: 1px solid var(--gray-300);
      border-radius: 0.5rem;
      outline: none;
      transition: var(--transition);
    }

    .date-filter:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2);
    }

    /* Mobile Responsive */
    @media (max-width: 992px) {
      .dashboard-sidebar {
        transform: translateX(-100%);
        box-shadow: none;
      }
      
      .sidebar-visible .dashboard-sidebar {
        transform: translateX(0);
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      }
      
      .dashboard-main {
        margin-left: 0;
        padding: 1rem;
      }
      
      .main-header {
        position: relative;
        padding-top: 3rem;
      }
      
      .mobile-toggle {
        position: absolute;
        top: 0;
        left: 0;
        background: none;
        border: none;
        color: var(--dark);
        font-size: 1.25rem;
        padding: 0.5rem;
        cursor: pointer;
        z-index: 100;
      }
      
      .dashboard-charts {
        grid-template-columns: 1fr;
      }
      
      .chart-container {
        min-height: 300px;
      }
    }

    @media (max-width: 768px) {
      .dashboard-stats {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      }
      
      .stat-card {
        padding: 1rem;
      }
      
      .stat-icon {
        width: 50px;
        height: 50px;
        font-size: 1.25rem;
      }
      
      .stat-number {
        font-size: 1.5rem;
      }
      
      .table-container {
        overflow-x: auto;
      }
      
      .user-menu {
        flex-direction: column;
        align-items: flex-end;
      }
    }

    @media (max-width: 576px) {
      .dashboard-stats {
        grid-template-columns: 1fr 1fr;
      }
      
      .main-header {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .header-right {
        width: 100%;
        margin-top: 1rem;
      }
      
      .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
      }
      
      .btn-primary {
        width: 100%;
        justify-content: center;
      }
      
      .tab-button {
        padding: 0.75rem 1rem;
        font-size: 0.9rem;
      }
    }

  </style>
</head>
<body>
  <div class="dashboard-container">
    <!-- Sidebar -->
    <aside class="dashboard-sidebar">
      <div class="sidebar-header">
        <h2>By @plus9995</h2>
      </div>
      <nav class="sidebar-nav">
        <ul>
          <li class="active"><a href="/admin/dashboard"><i class="fas fa-chart-line"></i> Overview</a></li>
          <li><a href="/admin/create-link"><i class="fas fa-plus-circle"></i> Create Link</a></li>
          <li><a href="/admin/settings"><i class="fas fa-cog"></i> Settings</a></li>
          <li><a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
      </nav>
      <div class="sidebar-footer">
        <p>&copy; <%= new Date().getFullYear() %> Apologize</p>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="dashboard-main">
      <!-- Mobile Toggle Button (only visible on mobile) -->
      <button class="mobile-toggle" id="mobileToggle">
        <i class="fas fa-bars"></i>
      </button>
      
      <header class="main-header">
        <div class="header-left">
          <h1>Dashboard Overview</h1>
          <p class="date-display"><%= new Date().toLocaleDateString('en-US', {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'}) %></p>
        </div>
        <div class="header-right">
          <div class="user-menu">
            <span class="user-greeting">Hello, Admin</span>
            <a href="/admin/logout" class="btn btn-outline"><i class="fas fa-sign-out-alt"></i> Logout</a>
          </div>
        </div>
      </header>

      <!-- Dashboard Overview -->
      <section class="dashboard-stats">
        <div class="stat-card animate__animated animate__fadeInUp">
          <div class="stat-icon">
            <i class="fas fa-file-code"></i>
          </div>
          <div class="stat-info">
            <h3>Total Scripts</h3>
            <p class="stat-number"><%= mods.length %></p>
          </div>
        </div>
        <div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.1s">
          <div class="stat-icon">
            <i class="fas fa-mouse-pointer"></i>
          </div>
          <div class="stat-info">
            <h3>Total Clicks</h3>
            <p class="stat-number"><%= mods.reduce((total, mod) => total + mod.clicks, 0) %></p>
          </div>
        </div>
        <div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.2s">
          <div class="stat-icon">
            <i class="fas fa-download"></i>
          </div>
          <div class="stat-info">
            <h3>Successful Downloads</h3>
            <p class="stat-number"><%= mods.reduce((total, mod) => total + mod.completedClicks, 0) %></p>
          </div>
        </div>
        <div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.3s">
          <div class="stat-icon">
            <i class="fas fa-percentage"></i>
          </div>
          <div class="stat-info">
            <h3>Conversion Rate</h3>
            <% 
              const totalClicks = mods.reduce((total, mod) => total + mod.clicks, 0);
              const totalDownloads = mods.reduce((total, mod) => total + mod.completedClicks, 0);
              const conversionRate = totalClicks > 0 ? ((totalDownloads / totalClicks) * 100).toFixed(1) : 0;
            %>
            <p class="stat-number"><%= conversionRate %>%</p>
          </div>
        </div>
      </section>

      <!-- Tab Navigation -->
      <section class="tab-navigation">
        <div class="tab-buttons">
          <button class="tab-button active" data-target="overview-tab">Overview</button>
          <button class="tab-button" data-target="checkpoint-tab">Checkpoint Analysis</button>
        </div>
      </section>

      <!-- Tab Contents -->
      <section class="tab-contents">
        <!-- Overview Tab -->
        <div id="overview-tab" class="tab-content active">
          <!-- Usage Chart -->
          <div class="dashboard-charts">
            <div class="chart-container">
              <h2>Usage Statistics</h2>
              <canvas id="usageChart"></canvas>
            </div>
            <div class="chart-container">
              <h2>Popular Scripts</h2>
              <canvas id="topModsChart"></canvas>  
            </div>
          </div>
        </div>

        <!-- Checkpoint Tab -->
        <div id="checkpoint-tab" class="tab-content">
          <div class="chart-container">
            <h2>Funnel Analysis</h2>
            <canvas id="funnelChart"></canvas>
          </div>
        </div>
      </section>

      <!-- Table Section -->
      <section class="mods-table-section">
        <div class="section-header">
          <h2>All Scripts</h2>
          <a href="/admin/create-link" class="btn btn-primary"><i class="fas fa-plus"></i> Create New Link</a>
        </div>
        
        <div class="table-container">
          <table class="mods-table">
            <thead>
              <tr>
                <th>Script Name</th> 
                <th>Short ID</th>
                <th>Clicks</th>
                <th>Downloads</th>
                <th>Conversion</th> 
                <th>Link</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (mods.length > 0) { %>
                <% mods.forEach(mod => { %>
                  <tr>
                    <td class="mod-name-cell">
                      <% if (mod.image) { %>
                        <img src="<%= mod.image %>" alt="<%= mod.name %>" class="mod-thumbnail">
                      <% } else { %>
                        <div class="mod-icon"><i class="fas fa-file-code"></i></div>
                      <% } %>
                      <span><%= mod.name %></span>
                    </td>
                    <td><%= mod.shortId %></td>
                    <td><%= mod.clicks %></td>
                    <td><%= mod.completedClicks %></td>
                    <td>
                      <% const rate = mod.clicks > 0 ? ((mod.completedClicks / mod.clicks) * 100).toFixed(1) : 0; %>
                      <%= rate %>%
                    </td>
                    <td>
                      <a href="/mod/<%= mod.shortId %>" target="_blank" class="link-btn"> 
                        <i class="fas fa-external-link-alt"></i> View
                      </a>
                    </td>
                    <td class="actions">
                      <a href="/admin/edit/<%= mod._id %>" class="btn btn-sm btn-edit">
                        <i class="fas fa-edit"></i>
                      </a>
                      <form action="/admin/delete/<%= mod._id %>?_method=DELETE" method="POST" class="inline-form">
                        <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this script?')">
                          <i class="fas fa-trash"></i>
                        </button>
                      </form>
                    </td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="7" class="text-center">No scripts found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </section>
      
      <!-- Checkpoint Detail Section -->
      <section class="checkpoint-detail-section">
        <div class="section-header">
          <h2>Checkpoint Details By Script</h2>
          <div class="filter-controls">
            <input type="date" id="dateRange" name="dateRange" class="date-filter">
          </div>
        </div>
        
        <div class="table-container">
          <table class="checkpoint-table">
            <thead>
              <tr>
                <th>Script Name</th>
                <th>Total Clicks</th>
                <th>Checkpoint 1</th>
                <th>Checkpoint 2</th>
                <th>Checkpoint 3</th>
                <th>Downloads</th>
                <th>Drop-off Rate</th>
              </tr>
            </thead>
            <tbody>
              <% if (mods.length > 0) { %>
                <% mods.forEach(mod => { %>
                  <tr>
                    <td><%= mod.name %></td>
                    <td><%= mod.clicks %></td>
                    <td><%= mod.checkpoint1Count %> (<%= mod.clicks > 0 ? ((mod.checkpoint1Count / mod.clicks) * 100).toFixed(1) : 0 %>%)</td>
                    <td><%= mod.checkpoint2Count %> (<%= mod.clicks > 0 ? ((mod.checkpoint2Count / mod.clicks) * 100).toFixed(1) : 0 %>%)</td>
                    <td><%= mod.checkpoint3Count %> (<%= mod.clicks > 0 ? ((mod.checkpoint3Count / mod.clicks) * 100).toFixed(1) : 0 %>%)</td>
                    <td><%= mod.completedClicks %> (<%= mod.clicks > 0 ? ((mod.completedClicks / mod.clicks) * 100).toFixed(1) : 0 %>%)</td>
                    <td>
                      <% 
                        // Calculate drop-off rates between steps
                        const drop1to2 = mod.checkpoint1Count > 0 ? 
                          ((1 - (mod.checkpoint2Count / mod.checkpoint1Count)) * 100).toFixed(1) : 0;
                        const drop2to3 = mod.checkpoint2Count > 0 ? 
                          ((1 - (mod.checkpoint3Count / mod.checkpoint2Count)) * 100).toFixed(1) : 0;
                        const drop3toComplete = mod.checkpoint3Count > 0 ? 
                          ((1 - (mod.completedClicks / mod.checkpoint3Count)) * 100).toFixed(1) : 0;
                        
                        // Find highest drop-off
                        const drops = [
                          { stage: 'CP1→CP2', value: parseFloat(drop1to2) },
                          { stage: 'CP2→CP3', value: parseFloat(drop2to3) },
                          { stage: 'CP3→Download', value: parseFloat(drop3toComplete) }
                        ];
                        
                        drops.sort((a, b) => b.value - a.value);
                        const highestDrop = drops[0];
                      %>
                      Highest at <%= highestDrop.stage %>: <%= highestDrop.value %>%
                    </td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="7" class="text-center">No scripts found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </section>
    </main>
  </div>

  <!-- JavaScript for charts -->
  <script>
    window.dashboardData = {
      mods: <%- JSON.stringify(mods) %>,
      totalClicks: <%= mods.reduce((total, mod) => total + mod.clicks, 0) %>,
      totalDownloads: <%= mods.reduce((total, mod) => total + mod.completedClicks, 0) %>
    };
    
    // Mobile sidebar toggle
    document.addEventListener('DOMContentLoaded', function() {
      const mobileToggle = document.getElementById('mobileToggle');
      const dashboardContainer = document.querySelector('.dashboard-container');
      
      mobileToggle.addEventListener('click', function() {
        dashboardContainer.classList.toggle('sidebar-visible');
      });
      
      // Tab switching
      const tabButtons = document.querySelectorAll('.tab-button');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons and tabs
          tabButtons.forEach(btn => btn.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
          
          // Add active class to clicked button and corresponding tab
          this.classList.add('active');
          const targetTab = document.getElementById(this.dataset.target);
          if (targetTab) {
            targetTab.classList.add('active');
          }
          
          // Initialize or redraw charts when tab is shown
          if (this.dataset.target === 'overview-tab') {
            initOverviewCharts();
          } else if (this.dataset.target === 'checkpoint-tab') {
            initFunnelChart();
          }
        });
      });
      
      // Initialize charts
      function initOverviewCharts() {
        // Usage Statistics Chart
        const usageCtx = document.getElementById('usageChart').getContext('2d');
        
        // Get data for last 7 days (simulated)
        const dates = [];
        const clicksData = [];
        const downloadsData = [];
        
        // Generate last 7 days
        for (let i = 6; i >= 0; i--) {
          const date = new Date();
          date.setDate(date.getDate() - i);
          dates.push(date.toLocaleDateString('en-US', {month: 'short', day: 'numeric'}));
          
          // Simulate some data
          const baseLine = Math.floor(window.dashboardData.totalClicks / 10);
          clicksData.push(baseLine + Math.floor(Math.random() * baseLine));
          downloadsData.push(Math.floor(clicksData[clicksData.length - 1] * (0.3 + Math.random() * 0.4)));
        }
        
        // Create gradient for chart background
        const clicksGradient = usageCtx.createLinearGradient(0, 0, 0, 300);
        clicksGradient.addColorStop(0, 'rgba(67, 97, 238, 0.3)');
        clicksGradient.addColorStop(1, 'rgba(67, 97, 238, 0.0)');
        
        const downloadsGradient = usageCtx.createLinearGradient(0, 0, 0, 300);
        downloadsGradient.addColorStop(0, 'rgba(6, 214, 160, 0.3)');
        downloadsGradient.addColorStop(1, 'rgba(6, 214, 160, 0.0)');
        
        if (window.usageChart) {
          window.usageChart.destroy();
        }
        
        window.usageChart = new Chart(usageCtx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [
              {
                label: 'Clicks',
                data: clicksData,
                borderColor: '#4361ee',
                backgroundColor: clicksGradient,
                borderWidth: 3,
                tension: 0.4,
                fill: true,
                pointBackgroundColor: '#4361ee',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 4,
                pointHoverRadius: 6
              },
              {
                label: 'Downloads',
                data: downloadsData,
                borderColor: '#06d6a0',
                backgroundColor: downloadsGradient,
                borderWidth: 3,
                tension: 0.4,
                fill: true,
                pointBackgroundColor: '#06d6a0',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 4,
                pointHoverRadius: 6
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'top',
                labels: {
                  usePointStyle: true,
                  boxWidth: 8,
                  font: {
                    size: 12
                  }
                }
              },
              tooltip: {
                backgroundColor: 'rgba(31, 41, 55, 0.8)',
                titleFont: {
                  size: 13
                },
                bodyFont: {
                  size: 12
                },
                padding: 10,
                cornerRadius: 6,
                displayColors: false
              }
            },
            scales: {
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  font: {
                    size: 11
                  }
                }
              },
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(209, 213, 219, 0.3)'
                },
                ticks: {
                  font: {
                    size: 11
                  },
                  callback: function(value) {
                    if (value % 1 === 0) {
                      return value;
                    }
                  }
                }
              }
            },
            interaction: {
              mode: 'index',
              intersect: false
            }
          }
        });
        
        // Top Mods Chart
        const topModsCtx = document.getElementById('topModsChart').getContext('2d');
        
        // Sort mods by clicks and get top 5
        const topMods = [...window.dashboardData.mods]
          .sort((a, b) => b.clicks - a.clicks)
          .slice(0, 5);
        
        if (window.topModsChart) {
          window.topModsChart.destroy();
        }
        
        window.topModsChart = new Chart(topModsCtx, {
          type: 'bar',
          data: {
            labels: topMods.map(mod => mod.name),
            datasets: [
              {
                label: 'Clicks',
                data: topMods.map(mod => mod.clicks),
                backgroundColor: [
                  '#4361ee',
                  '#3a0ca3',
                  '#7209b7',
                  '#f72585',
                  '#4cc9f0'
                ],
                borderRadius: 6,
                maxBarThickness: 40
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                backgroundColor: 'rgba(31, 41, 55, 0.8)',
                titleFont: {
                  size: 13
                },
                bodyFont: {
                  size: 12
                },
                padding: 10,
                cornerRadius: 6,
                callbacks: {
                  afterLabel: function(context) {
                    const mod = topMods[context.dataIndex];
                    const convRate = mod.clicks > 0 ? 
                      ((mod.completedClicks / mod.clicks) * 100).toFixed(1) : 0;
                    return `Downloads: ${mod.completedClicks} (${convRate}%)`;
                  }
                }
              }
            },
            scales: {
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  font: {
                    size: 11
                  },
                  callback: function(value, index) {
                    const label = this.getLabelForValue(value);
                    // Truncate long names
                    return label.length > 12 ? label.substr(0, 10) + '...' : label;
                  }
                }
              },
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(209, 213, 219, 0.3)'
                },
                ticks: {
                  font: {
                    size: 11
                  },
                  callback: function(value) {
                    if (value % 1 === 0) {
                      return value;
                    }
                  }
                }
              }
            }
          }
        });
      }
      
      function initFunnelChart() {
        const funnelCtx = document.getElementById('funnelChart').getContext('2d');
        
        // Aggregate checkpoint data
        const totalClicks = window.dashboardData.totalClicks;
        const totalCP1 = window.dashboardData.mods.reduce((sum, mod) => sum + mod.checkpoint1Count, 0);
        const totalCP2 = window.dashboardData.mods.reduce((sum, mod) => sum + mod.checkpoint2Count, 0);
        const totalCP3 = window.dashboardData.mods.reduce((sum, mod) => sum + mod.checkpoint3Count, 0);
        const totalDownloads = window.dashboardData.totalDownloads;
        
        // Calculate percentages
        const cp1Percent = totalClicks > 0 ? Math.round((totalCP1 / totalClicks) * 100) : 0;
        const cp2Percent = totalClicks > 0 ? Math.round((totalCP2 / totalClicks) * 100) : 0;
        const cp3Percent = totalClicks > 0 ? Math.round((totalCP3 / totalClicks) * 100) : 0;
        const downloadPercent = totalClicks > 0 ? Math.round((totalDownloads / totalClicks) * 100) : 0;
        
        if (window.funnelChart) {
          window.funnelChart.destroy();
        }
        
        window.funnelChart = new Chart(funnelCtx, {
          type: 'bar',
          data: {
            labels: ['Initial Click', 'Checkpoint 1', 'Checkpoint 2', 'Checkpoint 3', 'Download'],
            datasets: [{
              data: [totalClicks, totalCP1, totalCP2, totalCP3, totalDownloads],
              backgroundColor: [
                '#4361ee',
                '#3a0ca3',
                '#7209b7',
                '#f72585',
                '#06d6a0'
              ],
              borderRadius: 6,
              maxBarThickness: 80
            }]
          },
          options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                backgroundColor: 'rgba(31, 41, 55, 0.8)',
                titleFont: {
                  size: 13
                },
                bodyFont: {
                  size: 12
                },
                padding: 10,
                cornerRadius: 6,
                callbacks: {
                  afterLabel: function(context) {
                    const percentages = [100, cp1Percent, cp2Percent, cp3Percent, downloadPercent];
                    return `${percentages[context.dataIndex]}% of initial clicks`;
                  }
                }
              }
            },
            scales: {
              x: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(209, 213, 219, 0.3)'
                },
                ticks: {
                  font: {
                    size: 11
                  }
                }
              },
              y: {
                grid: {
                  display: false
                },
                ticks: {
                  font: {
                    size: 12,
                    weight: 'bold'
                  }
                }
              }
            }
          }
        });
      }
      
      // Initialize default tab charts
      initOverviewCharts();
      
      // Date filter functionality
      const dateFilter = document.getElementById('dateRange');
      if (dateFilter) {
        dateFilter.addEventListener('change', function() {
          // In a real app, you would fetch data for the selected date
          // For now, we'll just show an alert
          alert(`Date filter applied: ${this.value}. In a real application, this would filter the data.`);
        });
      }
    });